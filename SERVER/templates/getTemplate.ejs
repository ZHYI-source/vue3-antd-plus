<template>
    <section class="zy-get">
        <a-form :model="state.form"
                class="zy-form"
                :label-col="labelCol"
                ref="formRef"
                :wrapper-col="wrapperCol">
            <% fields.forEach((item) => { %>
                <% if (!(['_id','createdAt','updatedAt'].includes(item.name))) { %>
                    <a-form-item label="<%= item.comment %>"
                                 name="<%= item.name %>"
                                 :rules="[{ required: true, message: '请输入<%= item.comment || item.name %>!' }]">
                        <a-input v-model:value="state.form.<%= item.name %>" allowClear placeholder="请输入<%= item.comment || item.name%>"/>
                    </a-form-item>
                <% } %>
            <% }); %>
        </a-form>
        <ZyFormButton @save="onSubmit" @close="close"/>
    </section>
</template>

<script setup>
    import {reactive, toRaw, ref} from 'vue';
    import ZyFormButton from "comps/common/ZyFormButton.vue";
    import {ZyConfirm, ZyNotification} from "libs/util.toast";
    import {<%= tableName %>Create, <%= tableName %>Update} from "api/modules/api.<%= tableName %>";

    const labelCol = {
        style: {
            width: '100px',
        },
    }
    const wrapperCol = {
        span: 14,
    }

    const state = reactive({
        form: {}
    });

    const props = defineProps({
        updateData: {
            type: Object,
            default: () => {
            }
        }
    })
    const emit = defineEmits(['close'])
    const formRef = ref();
    const isAdd = ref(!props.updateData) // 是否是添加
    if (!isAdd.value) {
        state.form = props.updateData || {}
    }


    const onSubmit = async () => {
        try {
            const values = await formRef.value.validateFields();
            if (!isAdd.value) {
                delete state.form.password
            }
            let FUC = isAdd.value ? <%= tableName %>Create : <%= tableName %>Update
            FUC(toRaw(state.form)).then(res => {
                ZyNotification.success('操作成功')
                emit('close', true)
            }).catch(err => {
                ZyNotification.error(err || '操作失败')
            })
        } catch (errorInfo) {
            console.log('Failed:', errorInfo);
        }

    };

    const close = () => {
        ZyConfirm('还没保存数据，确认退出?').then(ok => {
            if (!ok) return
            emit('close')
        })
    }
</script>

<style scoped>

</style>
