<template>
    <section>
        <ZySearchForm
                :formValue="state.query.params"
                @submit="goPage"
                @reset="handleReset"
        >
            <% fields.forEach((item) => { %>
                <% if (!(['_id', 'createdAt', 'updatedAt'].includes(item.name))) { %>
                    <a-form-item name="<%= item.name %>">
                        <a-input v-model:value="state.query.params.<%= item.name %>" allowClear
                                 placeholder="请输入<%= item.comment %>" @pressEnter="goPage"
                                 autocomplete="off"/>
                    </a-form-item>
                <% } %>
            <% }); %>
        </ZySearchForm>
        <ZyFittleRow @add="goEdit"
                     addAuth="<%= auth %>:<%= tableName %>:create"
                     :showDelete="false"/>
        <a-table
                bordered
                :resizable="true"
                :loading="state.loading"
                :columns="columns"
                :row-key="record => record._id"
                :pagination="state.query.pagination"
                @change="handleTableChange"
                :row-class-name="(_record, index) => (index % 2 === 1 ? 'table-striped' : null)"
                :data-source="state.dataList">
            <template #bodyCell="{ column, record }">
                <template v-if="column.key === 'avatar'">
                    <a-image
                            :width="40"
                            :src="record.avatar"
                    />
                </template>
                <template v-else-if="column.key === 'action'">
                    <ZyToolButton
                            viewAuth="<%= auth %>:<%= tableName %>:list"
                            editAuth="<%= auth %>:<%= tableName %>:update"
                            deleteAuth="<%= auth %>:<%= tableName %>:delete"
                            @view="goView(record)"
                            @edit="goEdit(record)"
                            @delete="goDelete(record)"
                    >
                    </ZyToolButton>
                </template>
            </template>

        </a-table>
        <ZyModal :minWidth="650" :show="state.show.edit" :title="state.editTitle" key="Get<%= modelName %>Info"
                 @close="close">
            <Get<%= modelName %>Info :updateData="state.updateData" @close="close"/>
        </ZyModal>
        <ZyModal :minWidth="650" :show="state.show.view" title="查看<%= comment %>" key="View<%= modelName %>Info"
                 @close="close">
            <View<%= modelName %>Info :viewData="state.viewData" @close="close"/>
        </ZyModal>
    </section>

</template>

<script setup>
    /***<%= comment %>管理 生成：<%= new Date().toLocaleString() %>***/
    /**
     * 操作权限：
      '<%= auth %>:<%= tableName %>:list'
      '<%= auth %>:<%= tableName %>:create'
      '<%= auth %>:<%= tableName %>:update'
      '<%= auth %>:<%= tableName %>:delete'
     */

    import {reactive, toRaw} from 'vue'
    import Get<%= modelName %>Info from "./get-<%= tableName %>-info.vue";
    import View<%= modelName %>Info from "./view-<%= tableName %>-info.vue";

    import ZyModal from "comps/common/ZyModal.vue";
    import ZyToolButton from "comps/common/ZyToolButton.vue";
    import ZyFittleRow from "comps/common/ZyFittleRow.vue";
    import ZySearchForm from "comps/common/ZySearchForm.vue";

    import {ZyConfirm, ZyNotification} from "libs/util.toast";
    import {isEmptyObject} from "libs/util.common";
    import {TimeUtils} from "libs/util.time";
    import {hasPerms} from 'libs/util.common';

    import {<%= tableName %>Delete, <%= tableName %>List} from "api/modules/api.<%= tableName %>";

    const columns = [
        <% fields.forEach((item) => { %>
        <% if (!(['_id', 'createdAt', 'updatedAt'].includes(item.name))) { %>
        {title: "<%= item.comment || item.name %>", dataIndex: "<%= item.name %>", key: "<%= item.name %>", align: 'center'},
        <% } %>
        <% }); %>
        {title: '操作', width: 225, key: 'action', align: 'center', fixed: 'right'}
    ];

    const state = reactive({
        show: {
            add: false,
            edit: false,
            view: false
        },
        editTitle: '编辑',
        activeComponent: null,
        // 暂存更新数据
        updateData: {},
        resetData: {},
        // 暂存查看数据
        viewData: {},
        // 请求参数
        query: {
            params: {},
            pagination: {
                current: 1,
                pageSize: 10,
                total: 0,
                hideOnSinglePage: true,
            },
            sort: {
                columnKey: "createdAt",
                order: "descend" //降序（新的在前面）
            }
        },
        dataList: [],
        // loading
        loading: {
            spinning: false,
            tip: '加载中'
        }
    })

    // 查询
    const goPage = (num = 1) => {
        state.query.pagination.current = num;
        getDataList()
    }
    // 重置查询条件
    const handleReset = () => {
        goPage()
    }
    // 分页
    const pageChange = ({current, pageSize}) => {
        // 更新当前页码和每页条数
        state.query.pagination = reactive({
            current: current,
            pageSize: pageSize,
        });
        getDataList()
    }
    // 排序
    const sorterChange = ({columnKey, order}) => {
        // 更新排序
        state.query.sort = reactive({
            current: columnKey,
            order: order,
        });
        getDataList()
    }

    // 加载数据
    const getDataList = () => {
        state.loading.spinning = true
        // 将响应式query返回起原始对象
        let p = toRaw(state.query)
        <%= tableName %>List(p).then(res => {
            state.loading.spinning = false
            let datas = res.data.result
            for (const data of datas) {
                data.createdAt = TimeUtils.formatTime(data.createdAt)
                data.updatedAt = TimeUtils.formatTime(data.updatedAt)
            }
            state.dataList = datas
            state.query.pagination.total = res.data.total
            state.query.pagination.current = res.data.current
            state.query.pagination.pageSize = res.data.pageSize
        }).catch(err => {
            state.loading.spinning = false
            console.log(err)
        })

    }

    // 处理表格变化事件
    const handleTableChange = (paginationValue, filters, sorter) => {
        if (!isEmptyObject(paginationValue)) {
            pageChange(paginationValue)
        }
        if (!isEmptyObject(sorter)) {
            sorterChange(sorter)
        }
    };


    const goView = (row) => {
        state.show.view = true
        state.viewData = row
    }


    const goEdit = (row) => {
        state.show.edit = true
        row && row._id ? state.editTitle = '修改<%= comment %>' : state.editTitle = '添加<%= comment %>'
        state.updateData = row
    }

    const goDelete = (row) => {
        ZyConfirm('确认删除该条数据?').then(ok => {
            ok && <%= tableName %>Delete(row).then(res => {
                ZyNotification.success('删除成功')
                goPage()
            }).catch(err => {
                ZyNotification.error('操作失败')
                console.log(err)
            })
        })
    }
    // 重置密码
    const resetPassword = (data) => {
        state.resetData = data || {}
        state.show.reset = true
    }
    const close = (isSave) => {
        state.show.reset = false
        state.show.view = false
        state.show.edit = false
        isSave && goPage()
    }

    goPage()

</script>

<style scoped>

</style>
